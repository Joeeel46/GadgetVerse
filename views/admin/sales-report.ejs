<%- include('../partials/admin/header') %>

    <div class="container my-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h2 class="text-primary">Sales Report</h2>
            <div class="export-buttons">
                <button class="btn btn-primary me-2" onclick="exportToPDF()">
                    <i class="material-icons md-file_download"></i> Export PDF
                </button>
                <button class="btn btn-success" onclick="exportToExcel()">
                    <i class="material-icons md-file_download"></i> Export Excel
                </button>
            </div>
        </div>

        <div id="pdfPreviewModal" class="modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">PDF Preview</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <canvas id="pdfCanvas"></canvas> <!-- Canvas for PDF rendering -->
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" onclick="downloadPDF()">Download PDF</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Date Filter Options -->
        <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap gap-3">
            <select class="form-select w-auto" name="dateRange" id="dateRangeSelect" aria-label="Select Date Range">
                <option value="">Select Date Range</option>
                <option value="today">Today</option>
                <option value="week">This Week</option>
                <option value="month">This Month</option>
                <option value="year">This Year</option>
            </select>

            <form class="d-flex align-items-center gap-2">
                <label for="startDate" class="form-label me-2">Start Date:</label>
                <input type="date" id="startDate" name="startDate" class="form-control w-auto">
                <label for="endDate" class="form-label me-2">End Date:</label>
                <input type="date" id="endDate" name="endDate" class="form-control w-auto">
            </form>
        </div>

        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-lg-3 col-md-6">
                <div class="card shadow-sm text-center">
                    <div class="card-body">
                        <h6 class="text-muted">Total Sales</h6>
                        <h3 class="text-primary">0</h3>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card shadow-sm text-center">
                    <div class="card-body">
                        <h6 class="text-muted">Total Orders</h6>
                        <h3 class="text-success">
                            <%= count %>
                        </h3>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card shadow-sm text-center">
                    <div class="card-body">
                        <h6 class="text-muted">Total Discount</h6>
                        <h3 class="text-warning">0</h3>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card shadow-sm text-center">
                    <div class="card-body">
                        <h6 class="text-muted">Total Customers</h6>
                        <h3 class="text-info">0</h3>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sales Report Table -->
        <div class="table-responsive shadow-sm">
            <table class="table table-hover align-middle text-center" id="salesTable">
                <thead class="table-primary text-uppercase">
                    <tr>
                        <th>Sl No</th>
                        <th>User Name</th>
                        <th>Email</th>
                        <th>Products</th>
                        <th>Quantity</th>
                        <th>Date</th>
                        <th>Total Price</th>
                        <th>Coupon Code</th>
                        <th>Coupon Amount</th>
                        <th>Final Amount</th>
                        <th>Payment Method</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (orders.length === 0) { %>
                        <tr>
                            <td colspan="12" style="text-align: center;">
                                No sales data
                            </td>
                        </tr>
                    <% } else { %>
                    <% let k = 1; %>
                    <% for (let i = 0; i < orders.length; i++) { %>
                        <tr>
                            <td>
                                <%= k++ %>
                            </td>
                            <td data-customer-id="<%= orders[i].userId._id %>">
                                <%= orders[i].userId.name %>
                            </td>
                
                            <td>
                                <%= orders[i].userId.email %>
                            </td>
                
                            <td>
                                <ul>
                                    <% orders[i].orderedItems.forEach(item => { %>
                                        <li>
                                            <%= item.product.productName %>
                                        </li>
                                    <% }) %>
                                </ul>
                            </td>
                
                            <td>
                                <ul>
                                    <% orders[i].orderedItems.forEach(item => { %>
                                        <li>
                                            x<%= item.quantity|| x1 %> 
                                        </li>
                                    <% }) %>
                                </ul>
                            </td>
                
                            <td>
                                <%= new Date(orders[i].createdOn).toLocaleDateString() %>
                            </td>
                
                            <td>
                                Rs.<%= orders[i].totalPrice.toLocaleString() %>
                            </td>
                
                            <td>
                                <%= orders[i].couponCode || 'N/A' %>
                            </td>
                
                            <td>
                                Rs.<%= orders[i].discount || 0%>
                            </td>
                
                            <td>
                                Rs.<%= orders[i].finalAmount.toLocaleString() %>
                            </td>
                
                            <td>
                                <%= orders[i].paymentMethod %>
                            </td>
                
                            <td>
                                <%= orders[i].status %>
                            </td>
                        </tr>
                    <% } %>
                    <% } %>
                </tbody>
                
            </table>
        </div>
        <div class="pagination-area my-4">
            <nav>
                <ul class="pagination justify-content-center">
                    <% for(let i=1;i<=totalPages;i++){ %>
                        <li class="page-item <%= (i===page) ? 'active' : '' %>">
                            <a class="page-link" style="z-index: 100;" href="?page=<%= i %>">
                                <%= i %>
                            </a>
                        </li>
                        <% } %>
                </ul>
            </nav>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.13/jspdf.plugin.autotable.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.13/jspdf.plugin.autotable.min.js"></script>
    <script>
        
        function exportToPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF('l', 'mm', 'a4'); // Landscape orientation for better table view

            // Fetch all orders from the server
            fetch('/admin/downloadSalesPDF')
                .then(response => response.json())
                .then(data => {
                    const allOrders = data.orders;
                    
                    // Create a temporary table with all orders
                    const tempTable = document.createElement('table');
                    tempTable.id = 'fullSalesTable';
                    tempTable.style.display = 'none';
                    
                    // Create table header
                    const thead = document.createElement('thead');
                    thead.innerHTML = `
                        <tr>
                            <th>Sl No</th>
                            <th>Order ID</th>
                            <th>User Name</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Products</th>
                            <th>Quantity</th>
                            <th>Date</th>
                            <th>Total Price</th>
                            <th>Discount</th>
                            <th>Final Amount</th>
                            <th>Coupon Code</th>
                            <th>Payment Method</th>
                            <th>Status</th>
                        </tr>
                    `;
                    tempTable.appendChild(thead);

                    // Create table body
                    const tbody = document.createElement('tbody');
                    allOrders.forEach((order, index) => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${index + 1}</td>
                            <td>${order.orderId}</td>
                            <td>${order.userName}</td>
                            <td>${order.userEmail}</td>
                            <td>${order.userPhone}</td>
                            <td>${order.orderedItemsDetails.map(item => item.productName).join('<br>')}</td>
                            <td>${order.orderedItemsDetails.map(item => `x${item.quantity}`).join('<br>')}</td>
                            <td>${new Date(order.createdOn).toLocaleDateString()}</td>
                            <td>Rs.${order.totalPrice.toLocaleString()}</td>
                            <td>Rs.${order.discount.toLocaleString()}</td>
                            <td>Rs.${order.finalAmount.toLocaleString()}</td>
                            <td>${order.couponCode || 'N/A'}</td>
                            <td>${order.paymentMethod}</td>
                            <td>${order.status}</td>
                        `;
                        tbody.appendChild(row);
                    });
                    tempTable.appendChild(tbody);

                    // Add to document body
                    document.body.appendChild(tempTable);

                    // Add company logo and header
                    const logoURL = '/evara-user/assets/imgs/theme/logoo.png';
                    const img = new Image();
                    img.src = logoURL;
                    
                    img.onload = function () {
                        // Add logo to PDF
                        doc.addImage(img, 'PNG', 10, 10, 30, 30);
                        
                        // Add report title and date
                        doc.setFontSize(16);
                        doc.text('Complete Sales Report', 50, 20);
                        doc.setFontSize(10);
                        doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 50, 30);

                        // Add summary information
                        doc.setFontSize(10);
                        doc.text(`Total Sales: Rs.${data.totalSales.toLocaleString()}`, 50, 40);
                        doc.text(`Total Orders: ${data.totalOrders}`, 50, 45);
                        doc.text(`Total Discount: Rs.${data.totalDiscount.toLocaleString()}`, 50, 50);
                        doc.text(`Total Customers: ${data.uniqueCustomers}`, 50, 55);

                        // Configure auto table
                        doc.autoTable({
                            html: '#fullSalesTable',
                            startY: 65,
                            theme: 'grid',
                            headStyles: { 
                                fillColor: [41, 128, 185], 
                                textColor: [255, 255, 255], 
                                fontSize: 8 
                            },
                            bodyStyles: { 
                                fontSize: 7, 
                                cellPadding: 2, 
                                minCellWidth: 20 
                            },
                            styles: { 
                                overflow: 'linebreak', 
                                valign: 'middle', 
                                halign: 'center' 
                            },
                            columnStyles: {
                                // Adjust column widths as needed
                            },
                            didParseCell: function (data) {
                                if (data.cell.text === undefined || data.cell.text === null) {
                                    data.cell.text = '-';
                                }
                            },
                            willDrawCell: function (data) {
                                if (data.cell.text && data.cell.text.length > 20) {
                                    data.cell.styles.fontSize = 5;
                                }
                            }
                        });

                        // Save the PDF
                        doc.save('complete-sales-report.pdf');

                        // Clean up temporary table
                        document.body.removeChild(tempTable);
                    };

                    // Similar error handling as before...
                })
                .catch(error => {
                    console.error('Error fetching all orders:', error);
                    alert('Failed to generate complete sales report');
                });
        }

        function exportToExcel() {
            
            fetch('/admin/downloadSalesPDF')
                .then(response => response.json())
                .then(data => {
                    const allOrders = data.orders;

                   
                    const tempTable = document.createElement('table');
                    tempTable.id = 'fullSalesTable';
                    tempTable.style.display = 'none';

                    const thead = document.createElement('thead');
                    thead.innerHTML = `
                        <tr>
                            <th>Sl No</th>
                            <th>Order ID</th>
                            <th>User Name</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Products</th>
                            <th>Quantity</th>
                            <th>Date</th>
                            <th>Total Price</th>
                            <th>Discount</th>
                            <th>Final Amount</th>
                            <th>Coupon Code</th>
                            <th>Payment Method</th>
                            <th>Status</th>
                        </tr>
                    `;
                    tempTable.appendChild(thead);

                    
                    const tbody = document.createElement('tbody');
                    allOrders.forEach((order, index) => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${index + 1}</td>
                            <td>${order.orderId}</td>
                            <td>${order.userName}</td>
                            <td>${order.userEmail}</td>
                            <td>${order.userPhone}</td>
                            <td>${order.orderedItemsDetails.map(item => item.productName).join(', ')}</td>
                            <td>${order.orderedItemsDetails.map(item => `x${item.quantity}`).join(', ')}</td>
                            <td>${new Date(order.createdOn).toLocaleDateString()}</td>
                            <td>Rs.${order.totalPrice.toLocaleString()}</td>
                            <td>Rs.${order.discount.toLocaleString()}</td>
                            <td>Rs.${order.finalAmount.toLocaleString()}</td>
                            <td>${order.couponCode || 'N/A'}</td>
                            <td>${order.paymentMethod}</td>
                            <td>${order.status}</td>
                        `;
                        tbody.appendChild(row);
                    });
                    tempTable.appendChild(tbody);

                 
                    document.body.appendChild(tempTable);

                 
                    const wb = XLSX.utils.table_to_book(tempTable, { sheet: "Sales Report" });

                   
                    XLSX.writeFile(wb, 'complete-sales-report.xlsx');

                  
                    document.body.removeChild(tempTable);
                })
                .catch(error => {
                    console.error('Error fetching all orders:', error);
                    alert('Failed to generate complete sales report');
                });
        }

        function initializeDateFilter() {
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            const table = document.getElementById('salesTable');
            const tbody = table.getElementsByTagName('tbody')[0];
            const rows = tbody.getElementsByTagName('tr');
            const dateRangeSelect = document.getElementById('dateRangeSelect');

           
            let globalTotalSales = '₹<%= totalSales.toLocaleString() %>';
            let globalTotalOrders = '<%= count %>';
            let globalTotalDiscount = '₹<%= totalDiscount.toLocaleString() %>';
            let globalTotalCustomers = '<%= totalCustomers %>';

            function parseDate(dateStr) {
                const [day, month, year] = dateStr.split('/').map(Number);
                return new Date(year, month - 1, day);
            }

            function formatCurrency(amount) {
                return amount.toLocaleString('en-IN', {
                    style: 'currency',
                    currency: 'INR',
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).replace('Rs.', 'INR');
            }

            function filterTable() {
                const startDate = startDateInput.value ? new Date(startDateInput.value) : null;
                const endDate = endDateInput.value ? new Date(endDateInput.value) : null;

                if (startDate) startDate.setHours(0, 0, 0, 0);
                if (endDate) endDate.setHours(23, 59, 59, 999);

                let visibleRows = 0;
                let totalSales = 0;
                let totalDiscount = 0;
                const uniqueCustomers = new Set();

               
                for (const row of rows) {
                    const dateCell = row.cells[5].textContent.trim();
                    const rowDate = parseDate(dateCell);

                  
                    if (!rowDate) continue;

                    let showRow = true;
                    if (startDate && rowDate < startDate) showRow = false;
                    if (endDate && rowDate > endDate) showRow = false;

                    
                    row.style.display = showRow ? '' : 'none';

                    
                    if (showRow) {
                        visibleRows++;

                        
                        const finalAmount = parseFloat(row.cells[9].textContent.replace(/Rs\.|[,]/g, '')) || 0;
                        const discount = parseFloat(row.cells[8].textContent.replace(/Rs\.|[,]/g, '')) || 0;

                        totalSales += finalAmount;
                        totalDiscount += discount;

                        
                        const customerId = row.cells[1].getAttribute('data-customer-id');
                        if (customerId) uniqueCustomers.add(customerId);
                    }
                }

                const formatCurrency = (amount) => {
                    return amount.toLocaleString('en-IN', {
                        style: 'currency',
                        currency: 'INR',
                        minimumFractionDigits: 0,
                        maximumFractionDigits: 0
                    }).replace('INR', 'Rs.');
                };

                const summaryCards = document.querySelectorAll('.card .card-body');
                summaryCards.forEach(card => {
                    const title = card.querySelector('h6').textContent.trim();
                    const valueSpan = card.querySelector('h3');

                    switch (title) {
                        case 'Total Sales':
                           
                            valueSpan.textContent = formatCurrency(
                                (startDate || endDate) ? totalSales : globalTotalSales
                            );
                            break;
                        case 'Total Orders':
                            
                            valueSpan.textContent = (startDate || endDate) 
                                ? visibleRows 
                                : globalTotalOrders;
                            break;
                        case 'Total Discount':
                           
                            valueSpan.textContent = formatCurrency(
                                (startDate || endDate) ? totalDiscount : globalTotalDiscount
                            );
                            break;
                        case 'Total Customers':
                            
                            valueSpan.textContent = (startDate || endDate)
                                ? uniqueCustomers.size
                                : globalTotalCustomers;
                            break;
                    }
                });
            }

            function handleDateRangeSelection(e) {
                e.preventDefault();

                const today = new Date();
                const startDate = new Date(today);

                switch (this.value) {
                    case 'today':
                        startDateInput.value = today.toISOString().split('T')[0];
                        endDateInput.value = today.toISOString().split('T')[0];
                        break;
                    case 'week':
                        startDate.setDate(today.getDate() - 7);
                        startDateInput.value = startDate.toISOString().split('T')[0];
                        endDateInput.value = today.toISOString().split('T')[0];
                        break;
                    case 'month':
                        startDate.setMonth(today.getMonth() - 1);
                        startDateInput.value = startDate.toISOString().split('T')[0];
                        endDateInput.value = today.toISOString().split('T')[0];
                        break;
                    case 'year':
                        startDate.setFullYear(today.getFullYear() - 1);
                        startDateInput.value = startDate.toISOString().split('T')[0];
                        endDateInput.value = today.toISOString().split('T')[0];
                        break;
                    default:
                        startDateInput.value = '';
                        endDateInput.value = '';
                        break;
                }
                filterTable();
            }

            dateRangeSelect.addEventListener('change', handleDateRangeSelection);
            startDateInput.addEventListener('change', filterTable);
            endDateInput.addEventListener('change', filterTable);

            filterTable();
        }

        document.addEventListener('DOMContentLoaded', initializeDateFilter);
    </script>


    <%- include('../partials/admin/footer') %>