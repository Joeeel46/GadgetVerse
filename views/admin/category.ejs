<%- include('../partials/admin/header') %>
<section class="content-main">
    <div class="content-header">
        <div>
            <h2 class="content-title card-title">Categories</h2>
            <p>Add, edit, or delete a category</p>
        </div>
        <div>
            
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <form id="categoryForm" method="post" action="/admin/addCategory">
                        <div id="errorMessage" class="alert alert-danger d-none"></div>
                        <div id="successMessage" class="alert alert-success d-none"></div>
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Name</label>
                            <input type="text" placeholder="Type here" class="form-control" id="product_name" name="name" />
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Description</label>
                            <textarea placeholder="Type here" class="form-control" id="descriptionId" name="description"></textarea>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Create category</button>
                        </div>
                    </form>
                </div>
                <div class="col-md-9">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Offer Price</th>
                                    <th>Offer</th>
                                    <th>Status</th>
                                    <th>List/Unlist</th>
                                    <th class="text-end">Edit</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% cat.reverse().forEach((category, index) => { %>
                                    <tr id="category-<%= category._id %>">
                                        <td class="text-start"><%= category.name %></td>
                                        <td class="text-start"><%= category.description %></td>
                                        
                                        <td class="offer-percentage">
                                            <% if (category.categoryOffer) { %>
                                                <%= category.categoryOffer %>%
                                            <% } else { %>
                                                0%
                                            <% } %>
                                        </td>
                                        <td class="text-start">
                                            <% if (category.categoryOffer === 0) { %>
                                                <button class="btn btn-info text-white offer-button" style="width: 100px" onclick="addOffer('<%= category._id %>')">Add Offer</button>
                                            <% } else { %>
                                                <button class="btn btn-info text-white offer-button" style="width: 100px" onclick="removeOffer('<%= category._id %>')">Remove</button>
                                            <% } %>
                                        </td>
                                        
                                        <td class="text-start">
                                            <span class="badge rounded-pill" style="width: 60px" id="status-<%= category._id %>">
                                                <% if (category.isListed) { %>
                                                    <span class="alert-success">Listed</span>
                                                <% } else { %>
                                                    <span class="alert-danger">Unlisted</span>
                                                <% } %>
                                            </span>
                                        </td>
                                        <td class="text-start">
                                            <button id="toggle-status-<%= category._id %>" class="btn 
                                                <% if (category.isListed) { %>btn-danger<% } else { %>btn-success<% } %>" style="width: 70px">
                                                <% if (category.isListed) { %>
                                                    Unlist
                                                <% } else { %>
                                                    List
                                                <% } %>
                                            </button>
                                        </td>
                                        <td class="text-start">
                                            <a href="/admin/editCategory?id=<%=category._id%>" class="btn btn-info text-white">Edit</a>
                                        </td>
                                    </tr>
                                <% }) %>
                            </tbody>                            
                        </table>
                    </div>
                </div>
            </div>
            <!-- .row // -->
        </div>
        <!-- card body .// -->
    </div>
    
    <div class="pagination-area mt-15 mb-50">
        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-center">
                <% for (let i=1; i <=totalPages; i++) { %>
                    <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>">
                            <%= i %>
                        </a>
                    </li>
                    <% } %>
            </ul>
        </nav>
    </div>

</section>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>

$(document).ready(function() {
    // Handle listing/unlisting
    $('button[id^="toggle-status-"]').on('click', function() {
        const categoryId = $(this).attr('id').split('-')[2];  // Get category ID
        const action = $(this).text().trim().toLowerCase();  // 'list' or 'unlist'

        // Send the AJAX request based on the action (list/unlist)
        $.ajax({
            url: action === 'list' ? '/admin/unlistCategory' : '/admin/listCategory',  // Dynamic URL based on action
            type: 'GET',
            data: { id: categoryId },
            success: function(response) {
                if (response.status === 'success') {
                    // Update the status and button dynamically
                    const badge = $('#status-' + categoryId);
                    const button = $('#toggle-status-' + categoryId);

                    if (action === 'list') {
                        badge.removeClass('alert-danger').addClass('alert-success').text('Listed');
                        button.removeClass('btn-success').addClass('btn-danger').text('Unlist');
                    } else {
                        badge.removeClass('alert-success').addClass('alert-danger').text('Unlisted');
                        button.removeClass('btn-danger').addClass('btn-success').text('List');
                    }
                } else {
                    alert('Something went wrong. Please try again.');
                }
            },
            error: function() {
                alert('Error occurred while updating category status.');
            }
        });
    });
});

document.getElementById('categoryForm').addEventListener('submit', function (e) {
    e.preventDefault(); // Prevent default form submission

    const nameInput = document.getElementById('product_name');
    const descriptionInput = document.getElementById('descriptionId');
    const errorMessage = document.getElementById('errorMessage');
    const successMessage = document.getElementById('successMessage');

    // Clear previous messages
    errorMessage.classList.add('d-none');
    successMessage.classList.add('d-none');
    errorMessage.innerHTML = '';
    successMessage.innerHTML = '';

    let hasError = false;

    // Validate name
    const name = nameInput.value.trim();
    if (!name) {
        hasError = true;
        errorMessage.innerHTML += '<p>Name is required.</p>';
    } else {
        // Check name length
        if (name.length < 4) {
            hasError = true;
            errorMessage.innerHTML += '<p>Category name must be at least 4 characters long.</p>';
        }
        
        // Check if name contains numbers
        if (/\d/.test(name)) {
            hasError = true;
            errorMessage.innerHTML += '<p>Category name cannot contain numbers.</p>';
        }
    }

    // Validate description
    if (!descriptionInput.value.trim()) {
        hasError = true;
        errorMessage.innerHTML += '<p>Description is required.</p>';
    }

    if (hasError) {
        errorMessage.classList.remove('d-none');
        return; // Stop the form submission
    }

    // Submit the form using fetch
    const description = descriptionInput.value.trim();

    fetch("/admin/addCategory", {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name, description }),
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => {
                throw new Error(err.error);
            });
        }
        return response.json();
    })
    .then(data => {
        Swal.fire({
            icon: data.icon,
            title: data.message,
        }).then(() => {
            location.reload(); 
        });
    })
    .catch(error => {
        if (error.message === "Category already exists") {
            Swal.fire({
                icon: "warning",
                title: "Duplicate Category",
                text: "Category already exists. Please try a different name.",
            });
        } else {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "An error occurred while adding the category. Please try again later.",
            });
        }
    });
});

async function addOffer(categoryId) {
    const { value: amount } = await Swal.fire({
        title: "Offer in percentage",
        inputLabel: "Percentage",
        input: 'number',
        inputPlaceholder: "%",
        inputAttributes: {
            min: 1,
            max: 99
        },
        validationMessage: 'Please enter a value between 1 and 99'
    });

    if (!amount || amount > 99 || amount < 1) {
        Swal.fire({
            icon: "warning",
            text: "Please enter a valid percentage between 1% and 99%"
        });
        return;
    }

    try {
        const response = await fetch("/admin/addCategoryOffer", {
            method: "POST",
            headers: {
                'Content-Type': "application/json"
            },
            body: JSON.stringify({
                percentage: amount,
                categoryId: categoryId
            })
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire({
                icon: "success",
                title: "Success",
                text: data.message
            }).then(() => {
                // Update UI
                const categoryRow = document.querySelector(`#category-${categoryId}`);
                categoryRow.querySelector('.offer-percentage').textContent = `${amount}%`;
                const button = categoryRow.querySelector('.offer-button');
                button.textContent = 'Remove';
                button.setAttribute('onclick', `removeOffer('${categoryId}')`);
                
                // Update product prices if needed
                if (data.products) {
                    updateProductPrices(data.products);
                }
            });
        } else {
            Swal.fire({
                icon: "error",
                title: "Failed",
                text: data.message
            });
        }
    } catch (error) {
        console.error("Error adding offer:", error);
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "An error occurred while adding the offer"
        });
    }
}

async function removeOffer(categoryId) {
    try {
        const response = await fetch("/admin/removeCategoryOffer", {
            method: 'POST',
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ categoryId })
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire({
                icon: "success",
                title: "Success",
                text: data.message
            }).then(() => {
                // Update UI
                const categoryRow = document.querySelector(`#category-${categoryId}`);
                categoryRow.querySelector('.offer-percentage').textContent = '0%';
                const button = categoryRow.querySelector('.offer-button');
                button.textContent = 'Add Offer';
                button.setAttribute('onclick', `addOffer('${categoryId}')`);
                
                // Update product prices if needed
                if (data.products) {
                    updateProductPrices(data.products);
                }
            });
        } else {
            Swal.fire({
                icon: "error",
                title: "Failed",
                text: data.message
            });
        }
    } catch (error) {
        console.error("Error removing offer:", error);
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "An error occurred while removing the offer"
        });
    }
}

// Helper function to update product prices in the UI
function updateProductPrices(products) {
    products.forEach(product => {
        const priceElement = document.querySelector(`#product-price-${product.id}`);
        if (priceElement) {
            priceElement.textContent = `${product.salePrice}`;
        }
    });
}

</script>



    <%- include('../partials/admin/footer') %>