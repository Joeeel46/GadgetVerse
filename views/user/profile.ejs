<%- include("../../views/partials/user/header") %>
<style>
    .card-green {
    background-color: #ADD8E6;
    }

    .main {
    padding: 30px 0;
    }

    .dashboard-menu {
    background-color: #cce3e6;
    border-radius: 10px;
    padding: 15px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .dashboard-menu .nav-link {
    font-weight: bold;
    color: #30683c;
    box-shadow: 0 4px 10px rgba(123, 131, 112, 0.3), 0 4px 20px rgba(0, 191, 255, 0.2);
    transition: box-shadow 0.3s ease;
    }

    .dashboard-menu .nav-link:hover {
    color: #00bfff;
    box-shadow: 0 4px 15px rgba(173, 255, 47, 0.5), 0 6px 25px rgba(0, 191, 255, 0.4);
    }

    .card {
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
    margin-bottom: 20px;
    }

    .card-header {
    background-color: #487379;
    color: white;
    border-radius: 10px 10px 0 0;
    }

    .btn-success {
    background-color: #577194;
    border-color: #6bb87d;
    }

    .btn-success:hover {
    background-color: #506955;
    }

    .form-group {
    margin-bottom: 15px;
    }

    .required {
    color: red;
    }

    @media (max-width: 768px) {
    .dashboard-menu {
        padding: 10px;
    }

    .card {
        margin-bottom: 15px;
    }
    }

    .page-header.breadcrumb-wrap {
    background-color: #eee2e9;
    padding: 15px 0;
    }

    .breadcrumb {
    display: flex;
    align-items: center;
    font-family: 'Arial', sans-serif;
    font-size: 16px;
    color: #121311;
    }

    .breadcrumb a {
    color: #007bff;
    text-decoration: none;
    position: relative;
    margin: 0 5px;
    }

    .breadcrumb a:hover {
    color: #0056b3;
    }

    .breadcrumb span {
    margin: 0 5px;
    color: #999;
    }

    .breadcrumb a::after {
    content: '';
    position: absolute;
    width: 100%;
    height: 2px;
    background: #6e6e3a;
    left: 0;
    bottom: -2px;
    transform: scaleX(0);
    transition: transform 0.3s ease;
    }

    .breadcrumb a:hover::after {
    transform: scaleX(1);
    }
</style>


<main class="main">
 <div class="page-header breadcrumb-wrap mb-3">
   <div class="container">
     <div class="breadcrumb">
       <a href="#" rel="nofollow">Home</a>
       <span></span> Profile <span></span> Account
     </div>
   </div>
 </div>
  <section class="pt-10 pb-10">
   <div class="container">
     <div class="row">
       <div class="col-lg-10 m-auto">
         <div class="row">
           <div class="col-md-4">
             <div class="dashboard-menu">
               <ul class="nav flex-column" role="tablist">
                 <li class="nav-item">
                   <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab" aria-controls="dashboard" aria-selected="false">
                     <i class="fi-rs-settings-sliders mr-10"></i>Dashboard
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab" aria-controls="address" aria-selected="true">
                     <i class="fi-rs-marker mr-10"></i>My Address
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab" aria-controls="orders" aria-selected="false">
                     <i class="fi-rs-shopping-bag mr-10"></i>Orders
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#track-orders" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#wallet-history" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet History
                   </a>
                 </li>
                 <!-- <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#referal" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Referals
                   </a>
                 </li> -->
                 <li class="nav-item">
                   <a class="nav-link" href="/logout">
                     <i class="fi-rs-sign-out mr-10"></i>Logout
                   </a>
                 </li>
               </ul>
             </div>
           </div>
           <div class="col-md-8">
             <div class="tab-content dashboard-content">


               

               <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
                <div class="card card-green">
                  <div class="card-header">
                    <h5 class="mb-0 text-center">User Profile</h5>
                  </div>
                  <div class="card-body text-center">
                    <!-- Editable Fields -->
                    <form id="update-profile-form">
                      <div class="form-group">
                        <label for="userName">Name:</label>
                        <input type="text" id="userName" class="form-control" value="<%= user.name %>" required>
                      </div>
                      <div class="form-group">
                        <label for="userPhone">Phone:</label>
                        <input type="text" id="userPhone" class="form-control" value="<%= user.phone %>">
                      </div>
                      <div class="form-group">
                        <label for="userEmail">Email:</label>
                        <input type="email" id="userEmail" class="form-control" value="<%= user.email %>" required>
                      </div>
                      <button type="button" class="btn btn-success" id="updateProfileBtn">Save Changes</button>
                    </form>
                    <hr>
                    <!-- Edit Password -->
                    <button type="button" class="btn btn-warning" id="changePasswordBtn">Change Password</button>
                  </div>
                </div>
              </div>

              <!-- Change Password Modal -->
              <div class="modal fade" id="changePasswordModal" tabindex="-1" role="dialog" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title" id="changePasswordModalLabel">Change Password</h5>
                    </div>
                    <div class="modal-body">
                      <form id="change-password-form">
                        <div class="form-group">
                          <label for="currentPassword">Current Password:</label>
                          <input type="password" id="currentPassword" class="form-control" required>
                        </div>
                        <div class="form-group">
                          <label for="newPassword">New Password:</label>
                          <input type="password" id="newPassword" class="form-control" required>
                        </div>
                        <button type="button" class="btn btn-success" id="updatePasswordBtn">Update Password</button>
                      </form>
                    </div>
                  </div>
                </div>
              </div>
              


               <div
                 class="tab-pane fade"
                 id="address"
                 role="tabpanel"
                 aria-labelledby="address-tab"
               >
                 <div class="row">
                  <%if(userAddress){%>
                    <%userAddress.address.forEach((address)=>{%>
                    <div class="col-lg-6">
                     <div class="card mb-3 mb-lg-0">
                       <div class="card-header">
                         <h5 class="mb-0"><%=address.addressType%></h5>
                       </div>


                       <div class="card-body">
                         <address>
                          <%=address.name%><br/>
                          <%=address.state%><br/>
                          <%=address.city%><br/>
                          <%=address.landMark%><br/>
                          <%=address.streetAddress%><br/>
                         </address>
                         <p><%=address.pincode%><br/></p>
                         <p><%=address.phone%><br/></p>
                         <p><%=address.altPhone%><br/></p>
                         <div class="d-flex justify-content-between">
                           <a href="/editAddress?id=<%=address._id%>" class="btn-small">Edit</a>
                           <a href="/deleteAddress?id=<%=address._id%>" class="btn-small" onclick="return confirm('Are you sure you want to delete this address?')">Delete</a>
                         </div>
                       </div>
                     </div>
                   </div>
                   <%})%>
                   <%}else{%>
                
                   <div class="col-lg-6">
                     <div class="card mb-3 mb-lg-0">
                       <div class="card-header">
                         <h5 class="mb-0"></h5>
                       </div>
                       <div class="card-body">
                         <address>No address</address>
                       </div>
                     </div>
                   </div>
                   <%}%>
              
                   <div>
                     <a href="/addAddress">
                       <button class="btn btn-primary w-70">
                         Add address
                       </button>
                     </a>
                   </div>
                 </div>
               </div>


               <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Your Orders</h5>
                   </div>
                   <div class="card-body">
                     <div class="table-responsive">
                       <table class="table">
                         <thead>
                           <tr>
                             <th>Order</th>
                             <th>Status</th>
                             <th>Date</th>
                             <th>Total</th>
                             <th>Order Details</th>
                             <th>Actions</th>
                           </tr>
                         </thead>
                         <tbody>
                          <%if(orders){%>
                            <%orders.forEach(order=>{%>
                              <tr>
                                <td><%=order.orderId%></td>
                                <td><%=order.status%></td>
                                <td><%=order.createdOn.toLocaleDateString()%></td>
                                <td><%=order.finalAmount%></td>
                                <td><a href="/orderDetails?id=<%=order.orderId%>" class="btn-small d-block">View</a></td>
                                <td><%if(order.status !== 'Cancelled' && order.status !== 'Delivered' && order.status !== 'Return Requested' && order.status !== 'Returned'){%>
                                  <a onclick="confirmCancel('<%= order._id %>')">Cancel</a>
                                  <% }else if(order.status === 'Delivered' || order.status === 'Return Requested'){%>
                                    <a onclick="returnProduct('<%= order._id %>')">Return</a>
                                    <% } %>
                                </td>
                              </tr>
                              <% }) %>
                          <%}else{%>
                
                            <div class="col-lg-6">
                              <div class="card mb-3 mb-lg-0">
                                <div class="card-header">
                                  <h5 class="mb-0"></h5>
                                </div>
                                <div class="card-body">
                                  <h5>No Orders</h5>
                                </div>
                              </div>
                            </div>
                          <%}%>
                           
                         </tbody>
                       </table>
                     </div>
                   </div>
                 </div>
               </div>


               <div class="tab-pane fade" id="track-orders" role="tabpanel" aria-labelledby="track-orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Wallet</h5>
                   </div>
                   <div class="card-body contact-from-area">
                     <div class="row">
                       <div class="col-lg-8 mx-auto text-center mt-90">
                         <form>
                          <% if(wallet){ %>
                           <div class="form-group">
                             <label for="walletAmount" class="h4">Available Balance: ₹<%=wallet.balance.toLocaleString()%></label>
                             <div class="h3"></div>
                           </div>
                           <% }else{ %>
                           <div class="form-group">
                            <label for="walletAmount" class="h4">Available Balance: ₹0</label>
                            <div class="h3"></div>
                          </div>
                          <% } %>
                           <button type="button" id="addMoneyButton" class="btn btn-success" onclick="addMoneyToWallet()">Add Money</button>
                         </form>
                       </div>
                     </div>
                   </div>
                 </div>
               </div>


               <div class="tab-pane fade" id="wallet-history" role="tabpanel" aria-labelledby="orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Wallet History</h5>
                   </div>
                   <div class="card-body">
                     <div class="table-responsive">
                       <table class="table">
                         <thead>
                           <tr>
                            <th>Date</th>
                            <th>Type</th>
                            <th>Amount</th>
                            <th>Transaction Id</th>
                            <th>Status</th>
                           </tr>
                         </thead>
                         <tbody>
                          <% if (wallet && wallet.transactions.length > 0) { %>
                              <% wallet.transactions.forEach(transaction => { %>
                                  <tr>
                                      <td><%= new Date(transaction.date).toLocaleDateString() %></td>
                                      <td><%= transaction.type %></td>
                                      <td>₹<%= transaction.amount %></td>
                                      <td><%= transaction._id || '-' %></td>
                                      <td><%= transaction.status %></td>
                                  </tr>
                              <% }); %>
                          <% } else { %>
                              <tr>
                                  <td colspan="6" class="text-center">No transactions available</td>
                              </tr>
                          <% } %>
                      </tbody>
                         </tbody>
                       </table>
                     </div>
                   </div>
                 </div>
               </div>


               <!-- <div class="tab-pane fade" id="referal" role="tabpanel" aria-labelledby="track-orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Referal</h5>
                   </div>
                   <div class="card-body">
                     <h6 class="mb-3">Refer your friends and earn money!</h6>
                     <p>Share this link: <strong>></strong></p>
                     <p>Earned: ₹</p>
                   </div>
                 </div>
               </div> -->
       </div>
     </div>
   </div>
 </section>
</main>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"></script>
<script>

const ITEMS_PER_PAGE = 8;

class PaginationManager {
  constructor(tableId, paginationId, columns, rowMapper) {
    this.tableId = tableId;
    this.paginationId = paginationId;
    this.columns = columns;
    this.rowMapper = rowMapper;
    this.currentPage = 1;
    this.data = [];
    
    // Bind methods
    this.handlePageChange = this.handlePageChange.bind(this);
    this.render = this.render.bind(this);
    this.initialize = this.initialize.bind(this);
  }

  // Initialize the pagination system
  initialize() {
    // Get table and create pagination container
    const table = document.querySelector(this.tableId);
    if (!table) return;

    const paginationContainer = document.createElement('div');
    paginationContainer.id = this.paginationId.replace('#', '');
    table.parentNode.insertAdjacentElement('afterend', paginationContainer);

    // Load initial data from table
    this.data = Array.from(table.querySelectorAll('tbody tr'))
      .filter(row => row.cells.length >= this.columns)
      .map(this.rowMapper);

    // Initial render
    if (this.data.length > 0) {
      this.render();
    }
  }

  // Handle page changes
  handlePageChange(newPage) {
    this.currentPage = newPage;
    this.render();
  }

  // Render table content and pagination
  render() {
    this.renderTable();
    this.renderPagination();
  }

  // Render table content
  renderTable() {
    const table = document.querySelector(this.tableId);
    if (!table) return;

    const tbody = table.querySelector('tbody');
    const start = (this.currentPage - 1) * ITEMS_PER_PAGE;
    const end = start + ITEMS_PER_PAGE;
    const paginatedData = this.data.slice(start, end);

    let html = '';
    if (paginatedData.length > 0) {
      paginatedData.forEach(item => {
        if (this.tableId.includes('orders')) {
          html += `
            <tr>
              <td>${item.orderId}</td>
              <td>${item.status}</td>
              <td>${item.date}</td>
              <td>${item.finalAmount}</td>
              <td><a href="/orderDetails?id=${item.orderId}" class="btn-small d-block">View</a></td>
              <td>
                ${item.status !== 'Cancelled' && item.status !== 'Delivered' && 
                  item.status !== 'Return Requested' && item.status !== 'Returned' 
                  ? `<a onclick="confirmCancel('${item._id}')">Cancel</a>`
                  : item.status === 'Delivered' || item.status === 'Return Requested'
                    ? `<a onclick="returnProduct('${item._id}')">Return</a>`
                    : ''
                }
              </td>
            </tr>
          `;
        } else {
          html += `
            <tr>
              <td>${item.date}</td>
              <td>${item.type}</td>
              <td>₹${item.amount}</td>
              <td>${item._id || '-'}</td>
              <td>${item.status}</td>
            </tr>
          `;
        }
      });
    } else {
      const colSpan = this.tableId.includes('orders') ? 6 : 5;
      html = `<tr><td colspan="${colSpan}" class="text-center">No data available</td></tr>`;
    }

    tbody.innerHTML = html;
  }

  // Render pagination controls
  renderPagination() {
    const container = document.querySelector(this.paginationId);
    if (!container || !this.data.length) {
      if (container) container.innerHTML = '';
      return;
    }

    const totalPages = Math.max(1, Math.ceil(this.data.length / ITEMS_PER_PAGE));

    let html = `
      <div class="pagination-controls d-flex justify-content-center align-items-center gap-2 mt-3">
        <button 
          class="btn btn-sm ${this.currentPage === 1 ? 'btn-secondary disabled' : 'btn-primary'}"
          ${this.currentPage === 1 ? 'disabled' : ''}
          data-page="${this.currentPage - 1}">
          Previous
        </button>
    `;

    for (let i = 1; i <= totalPages; i++) {
      html += `
        <button 
          class="btn btn-sm ${this.currentPage === i ? 'btn-primary' : 'btn-outline-primary'}"
          data-page="${i}">
          ${i}
        </button>
      `;
    }

    html += `
        <button 
          class="btn btn-sm ${this.currentPage === totalPages ? 'btn-secondary disabled' : 'btn-primary'}"
          ${this.currentPage === totalPages ? 'disabled' : ''}
          data-page="${this.currentPage + 1}">
          Next
        </button>
      </div>
    `;

    container.innerHTML = html;

    // Add event listeners
    container.querySelectorAll('button').forEach(button => {
      button.addEventListener('click', () => {
        const page = parseInt(button.dataset.page);
        if (!isNaN(page) && page >= 1 && page <= totalPages) {
          this.handlePageChange(page);
        }
      });
    });
  }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  // Initialize Orders Pagination
  const ordersPagination = new PaginationManager(
    '#orders table',
    '#orders-pagination',
    6,
    row => ({
      orderId: row.cells[0].textContent,
      status: row.cells[1].textContent,
      date: row.cells[2].textContent,
      finalAmount: row.cells[3].textContent,
      _id: row.cells[5].querySelector('a')?.getAttribute('onclick')?.match(/'([^']+)'/)?.[1] || ''
    })
  );
  ordersPagination.initialize();

  // Initialize Wallet History Pagination
  const walletPagination = new PaginationManager(
    '#wallet-history table',
    '#wallet-history-pagination',
    5,
    row => ({
      date: row.cells[0].textContent,
      type: row.cells[1].textContent,
      amount: row.cells[2].textContent.replace('₹', ''),
      _id: row.cells[3].textContent,
      status: row.cells[4].textContent
    })
  );
  walletPagination.initialize();
});



  async function addMoneyToWallet() {
    const {value:amount} = await Swal.fire({
      title:"Enter the amount to add to wallet",
      input: 'number',
      inputAttribute:{
        min:1,
        max:100000
      },
      inputValidator: (value) => {
        if(!value || value <= 0){
          return "Please enter a valid amount!"
        }
      },
      showCancelButton: true,
      confirmButtonText: 'Add Money',
      confirmButtonColor: '#007bff'
    })
   

    if(!amount){
      return;
    }

    try {
      
      const paymentResponse = await fetch('/createWalletPayment', {
        method: 'POST',
        headers: {
          'Content-Type' : 'application/json'
        },
        body: JSON.stringify({ amount })
      })
      

      const paymentData = await paymentResponse.json()
    
      
      if(!paymentData.success){
        await Swal.fire({
          icon: 'error',
          title: 'Payment Error',
          confirmButtonText: 'Okay',
          confirmButtonColor: '#007bff',
        });
        throw new Error('Failed to create Razorpay order.');
      }

      const options = {
        key:"rzp_test_pgn7NyAMZL75UQ",
        amount: amount * 100,
        currency: 'INR',
        description: 'Adding money to wallet',
        order_id: paymentData.orderId,
        handler: async function (response) {
          try{
            const paymentDetails = {
              paymentId: response.razorpay_payment_id,
              razorpayId: response.razorpay_order_id,
              signature: response.razorpay_signature,
              amount: amount
            }

            const updateResponse = await fetch ('/updateWalletPayment',{
              method:'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(paymentDetails)
            })

            const updateResult = await updateResponse.json()
            console.log('upfateresult',updateResult)
            if(updateResult.status === 200){
              Swal.fire({
                icon:'success',
                title: 'Money Added',
                text:`₹${amount} has been added to your wallet.`,
                confirmButtonText: 'Okay'
              }).then(()=>{
                window.location.reload()
              })

            }else{
              console.log(error)
              throw new Error(updateResult.message || "Failed to update wallet.")
            }

          } catch (error){
            console.log('Error updating wallet:',error)
            Swal.fire({
              icon:'error',
              title: 'Error',
              text:error.message
            })
          }
        },
        prefil:{
          name: "Your Name",
          email: "your@example.com",
          contact: "1234567890"
        },
        theme: {
          color: "#39b4ac",

        },
      }

      const razorpay = new Razorpay(options);
      razorpay.open();

    } catch (error) {
      console.error('Error initiating wallet payment:', error);
      Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message,
      });
    }
  }

  async function returnProduct(orderId) {
      Swal.fire({
          title: "Are you sure?",
          text: "Do you want to return this product?",
          icon: "warning",
          showCancelButton: true,
          confirmButtonText: "Yes, return it!",
          cancelButtonText: "No, keep it",
          confirmButtonColor: "#d33",
          cancelButtonColor: "#3085d6"
      }).then((result) => {
          if (result.isConfirmed) {
              // Send a request to update the order
              fetch(`/returnProduct?id=${orderId}`, {
                  method: "POST",
              })
              .then(response => response.json())
              .then(data => {
                  if (data.success) {
                      Swal.fire({
                        title:"Returned!", 
                        text:"The product has been returned successfully.", 
                        icon:"success",
                        timer:2500
                      })
                      // Optionally, reload the page to reflect changes
                      .then(()=>{
                        window.location.reload()
                      })
                  } else {
                      Swal.fire("Error", data.message, "error");
                  }
              })
              .catch(error => {
                  console.error("Error:", error);
                  Swal.fire("Error", "Something went wrong. Please try again.", "error");
              });
          }
      });
  }

  function confirmCancel(orderId) {
    Swal.fire({
        title: "Are you sure?",
        text: "Do you really want to cancel this order?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, cancel it!",
        cancelButtonText: "No, keep it",
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6"
    }).then((result) => {
        if (result.isConfirmed) {
            // Redirect to the cancellation endpoint or perform an AJAX call
            window.location.href = `/cancelOrder?id=${orderId}`;
        }
    });
}

  // Update Profile AJAX Request
  // Update Profile AJAX Request
  document.getElementById('updateProfileBtn').addEventListener('click', () => {
  const userName = document.getElementById('userName').value;
  const userPhone = document.getElementById('userPhone').value;
  const userEmail = document.getElementById('userEmail').value;

  fetch('/update-profile', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ name: userName, phone: userPhone, email: userEmail }),
  })
    .then((res) => res.json())
    .then((data) => {
      if (data.success) {
        Swal.fire({
          title: 'Success!',
          text: 'Your profile has been updated successfully.',
          icon: 'success',
          confirmButtonText: 'OK',
        });
      } else {
        Swal.fire({
          title: 'Error!',
          text: data.message || 'Failed to update profile. Please try again.',
          icon: 'error',
          confirmButtonText: 'Retry',
        });
      }
    })
    .catch((err) => {
      console.error(err);
      Swal.fire({
        title: 'Error!',
        text: 'Something went wrong. Please try again later.',
        icon: 'error',
        confirmButtonText: 'OK',
      });
    });
});

// Change Password AJAX Request
document.getElementById('updatePasswordBtn').addEventListener('click', () => {
  const currentPassword = document.getElementById('currentPassword').value;
  const newPassword = document.getElementById('newPassword').value;

  fetch('/change-password', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ currentPassword, newPassword }),
  })
    .then((res) => res.json())
    .then((data) => {
      if (data.success) {
        Swal.fire({
          title: 'Success!',
          text: data.message || 'Password changed successfully.',
          icon: 'success',
          confirmButtonText: 'OK',
        }).then(() => {
          // Hide the modal after user clicks OK
          $('#changePasswordModal').modal('hide');
        });
      } else {
        Swal.fire({
          title: 'Error!',
          text: data.message || 'Failed to change password. Please try again.',
          icon: 'error',
          confirmButtonText: 'Retry',
        });
      }
    })
    .catch((err) => {
      console.error(err);
      Swal.fire({
        title: 'Error!',
        text: 'Something went wrong. Please try again later.',
        icon: 'error',
        confirmButtonText: 'OK',
      });
    });
});

// Show Change Password Modal
document.getElementById('changePasswordBtn').addEventListener('click', () => {
  $('#changePasswordModal').modal('show');
});

document.addEventListener("DOMContentLoaded", function () {
    const navLinks = document.querySelectorAll(".dashboard-menu .nav-link");
    const tabContents = document.querySelectorAll(".tab-pane");

    const activeTabId = localStorage.getItem("activeDashboardTab");
    if (activeTabId) {
        navLinks.forEach(link => link.classList.remove("active"));
        tabContents.forEach(content => content.classList.remove("active", "show"));

        
        const activeTab = document.getElementById(activeTabId);
        const activeTabContent = document.querySelector(activeTab.getAttribute("href"));

        if (activeTab && activeTabContent) {
            activeTab.classList.add("active");
            activeTabContent.classList.add("active", "show");
        }
    }


    navLinks.forEach(link => {
        link.addEventListener("click", function () {
            localStorage.setItem("activeDashboardTab", this.id);
        });
    });
});

</script>

<%- include("../../views/partials/user/footer") %>
